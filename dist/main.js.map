{"version":3,"file":"main.js","mappings":"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","sources":["webpack://virusochka/./src/utils/math-utils.ts","webpack://virusochka/./src/area-state-manager.ts","webpack://virusochka/./src/area-renderer.ts","webpack://virusochka/./src/models/cell.ts","webpack://virusochka/./src/models/area.ts","webpack://virusochka/./src/game.ts","webpack://virusochka/./src/main.ts"],"sourcesContent":["export class MathUtils {\r\n    public static minMax(value: number, min: number, max: number): number {\r\n        return Math.min(Math.max(value, min), max);\r\n    }\r\n\r\n    public static generateRandomNumber(min: number, max: number) {\r\n        const ceilMin = Math.ceil(min);\r\n        const floorMax = Math.floor(max);\r\n        return Math.floor(Math.random() * (floorMax - ceilMin + 1)) + ceilMin;\r\n    }\r\n}","import { Area } from \"./models/area\";\r\nimport { Cell } from \"./models/cell\";\r\nimport { ICoord } from \"./models/coord\";\r\nimport { MathUtils } from \"./utils/math-utils\";\r\n\r\nexport class AreaStateManager {\r\n    public history = new Array<Area>();\r\n\r\n    private readonly area: Area;\r\n\r\n    private stateCounter = 0;\r\n    private countOfHealthyCells = 0;\r\n\r\n    constructor(area: Area) {\r\n        this.area = area;\r\n\r\n        this.saveHistory();\r\n    }\r\n\r\n    public get isAreaUnchangeable(): boolean {\r\n        return this.area.size * this.area.size === this.countOfHealthyCells;\r\n    }\r\n\r\n    public next(): void {\r\n        if (this.stateCounter !== 0 && this.isAreaUnchangeable) {\r\n            return;\r\n        }\r\n\r\n        this.countOfHealthyCells = 0;\r\n\r\n        if (this.stateCounter === 0) {\r\n            const centerCoord = { i: Math.floor(this.area.size / 2), j: Math.floor(this.area.size / 2) };\r\n            const infectResult = this.area.infectCell(centerCoord);\r\n            if (!infectResult) {\r\n                throw new Error(\"Unable to infect first cell\");\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this.area.size; i++) {\r\n            for (let j = 0; j < this.area.size; j++) {\r\n                const coord = { i: i, j: j };\r\n\r\n                const cell = this.area.getCell(coord);\r\n                if (!cell) {\r\n                    continue;\r\n                }\r\n\r\n                switch (cell.state) {\r\n                    case \"infected\":\r\n                        if (cell.stateLifetime > 0) {\r\n                            this.processInfectedCell(cell, coord);\r\n                        }\r\n                        break;\r\n                    case \"immune\":\r\n                        this.processImmuneCell(cell, coord);\r\n                        break;\r\n                    case \"healthy\":\r\n                        this.countOfHealthyCells++;\r\n                        break;\r\n                }\r\n\r\n                cell.incrementLifeTime();\r\n            }\r\n        }\r\n\r\n        this.stateCounter++;\r\n\r\n        this.saveHistory();\r\n    }\r\n\r\n    private processInfectedCell(cell: Cell, coord: ICoord): void {\r\n        if (cell.stateLifetime > 5) {\r\n            this.area.immunizeCell(coord);\r\n        } else {\r\n            const neighborCoords = this.area.getHealthyNeighborCoords(coord);\r\n            const random = MathUtils.generateRandomNumber(0, 1);\r\n            if (neighborCoords.length > 0 && random === 0) {\r\n                const random = MathUtils.generateRandomNumber(0, neighborCoords.length - 1);\r\n                this.area.infectCell(neighborCoords[random]);\r\n            }\r\n        }\r\n    }\r\n\r\n    private processImmuneCell(cell: Cell, coord: ICoord): void {\r\n        if (cell.stateLifetime > 3) {\r\n            this.area.recoverCell(coord);\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        this.area.resetCells();\r\n        this.resetHistory();\r\n        this.stateCounter = 0;\r\n    }\r\n\r\n    private resetHistory(): void {\r\n        this.history = [];\r\n        this.saveHistory();\r\n    }\r\n\r\n    private saveHistory(): void {\r\n        this.history.push(this.area.copy());\r\n    }\r\n}","import { Area } from \"./models/area\";\r\nimport { Cell } from \"./models/cell\";\r\nimport { ICoord } from \"./models/coord\";\r\n\r\nexport class AreaRenderer {\r\n    private readonly canvasEl: HTMLCanvasElement;\r\n    private readonly ctx: CanvasRenderingContext2D;\r\n\r\n    private cellSize: number = 100;\r\n\r\n    constructor() {\r\n        this.canvasEl = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\n        this.ctx = this.canvasEl.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n        if (!this.canvasEl || !this.ctx) {\r\n            throw new Error(\"Unable to create AreaRenderer\");\r\n        }\r\n    }\r\n\r\n    public render(area: Area): void {\r\n        this.cellSize = this.canvasEl.width / area.size;\r\n\r\n        this.ctx.fillStyle = \"#000\";\r\n        this.ctx.fillRect(0, 0, this.canvasEl.width, this.canvasEl.height);\r\n\r\n        for (let i = 0; i < area.size; i++) {\r\n            for (let j = 0; j < area.size; j++) {\r\n                const coord = { i: i, j: j };\r\n                this.renderCell(area.getCell(coord), coord);\r\n            }\r\n        }\r\n    }\r\n\r\n    public renderCell(cell: Cell | null, coord: ICoord): void {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        this.ctx.fillStyle = this.getCellColor(cell);\r\n\r\n        const x = coord.j * this.cellSize;\r\n        const y = coord.i * this.cellSize;\r\n        const wOffset = x > 0 ? 2 : 3;\r\n        const hOffset = y > 0 ? 2 : 3;\r\n        this.ctx.fillRect(x > 0 ? x : 2, y > 0 ? y : 2, this.cellSize - wOffset, this.cellSize - hOffset);\r\n    }\r\n\r\n    private getCellColor(cell: Cell | null): string {\r\n        if (!cell) {\r\n            return \"#ffffff\";\r\n        }\r\n\r\n        switch (cell.state) {\r\n            case \"infected\":\r\n                return \"#c71010\";\r\n            case \"immune\":\r\n                return \"#c7c110\";\r\n            case \"healthy\":\r\n                return \"#00992b\";\r\n            default:\r\n                return \"#ffffff\";\r\n        }\r\n    }\r\n}","import { CellStateType } from \"src/typings/cell\";\r\n\r\nexport class Cell {\r\n    private _state: CellStateType = \"healthy\";\r\n    private _stateLifetime: number = 0;\r\n\r\n    public get state(): CellStateType {\r\n        return this._state;\r\n    }\r\n\r\n    public get stateLifetime(): number {\r\n        return this._stateLifetime;\r\n    }\r\n\r\n    public infect(): boolean {\r\n        if (this._state !== \"healthy\") {\r\n            return false;\r\n        }\r\n\r\n        this._state = \"infected\";\r\n        this._stateLifetime = 0;\r\n        return true;\r\n    }\r\n\r\n    public immunize(): boolean {\r\n        if (this._state !== \"infected\") {\r\n            return false;\r\n        }\r\n\r\n        this._state = \"immune\";\r\n        this._stateLifetime = 0;\r\n        return true;\r\n    }\r\n\r\n    public recover(): boolean {\r\n        if (this._state !== \"immune\") {\r\n            return false;\r\n        }\r\n\r\n        this._state = \"healthy\";\r\n        this._stateLifetime = 0;\r\n        return true;\r\n    }\r\n\r\n    public reset(): void {\r\n        this._state = \"healthy\";\r\n        this._stateLifetime = 0;\r\n    }\r\n\r\n    public incrementLifeTime(): void {\r\n        this._stateLifetime++;\r\n    }\r\n}","import { AreaRenderer } from \"./../area-renderer\";\r\nimport { MathUtils } from \"../utils/math-utils\";\r\nimport { Cell } from \"./cell\";\r\nimport { ICoord } from \"./coord\";\r\n\r\nexport class Area {\r\n    private static readonly MIN_SIZE = 3;\r\n    private static readonly MAX_SIZE = 111;\r\n\r\n    private readonly renderer: AreaRenderer;\r\n\r\n    private _size = 3;\r\n    private _cells = new Array<Array<Cell>>();\r\n\r\n    constructor(size: number, cells?: Array<Array<Cell>>) {\r\n        this.renderer = new AreaRenderer();\r\n\r\n        this.size = size;\r\n        this.initCells(cells);\r\n    }\r\n\r\n    private initCells(cells?: Array<Array<Cell>>): void {\r\n        this._cells = new Array<Array<Cell>>();\r\n        for (let i = 0; i < this._size; i++) {\r\n            this._cells.push(new Array<Cell>());\r\n            for (let j = 0; j < this._size; j++) {\r\n                const cell = cells && cells[i][j] ? cells[i][j] : new Cell();\r\n                this._cells[i].push(cell);\r\n            }\r\n        }\r\n    }\r\n\r\n    public get size(): number {\r\n        return this._size;\r\n    }\r\n\r\n    public set size(value: number) {\r\n        if (this._size === value) {\r\n            return;\r\n        }\r\n\r\n        value = MathUtils.minMax(value, Area.MIN_SIZE, Area.MAX_SIZE);\r\n        this._size = (value & 1) ? value : value - 1;\r\n        this.initCells();\r\n    }\r\n\r\n    public resetCells(): void {\r\n        this._cells.forEach(row => {\r\n            row.forEach(cell => cell.reset());\r\n        });\r\n        this.render();\r\n    }\r\n\r\n    public infectCell(coord: ICoord): boolean {\r\n        const cell = this.getCell(coord);\r\n        const succeed = cell?.infect() ?? false;\r\n        this.renderer.renderCell(cell, coord);\r\n        return succeed;\r\n    }\r\n\r\n    public immunizeCell(coord: ICoord): boolean {\r\n        const cell = this.getCell(coord);\r\n        const succeed = cell?.immunize() ?? false;\r\n        this.renderer.renderCell(cell, coord);\r\n        return succeed;\r\n    }\r\n\r\n    public recoverCell(coord: ICoord): boolean {\r\n        const cell = this.getCell(coord);\r\n        const succeed = cell?.recover() ?? false;\r\n        this.renderer.renderCell(cell, coord);\r\n        return succeed;\r\n    }\r\n\r\n    public render(): void {\r\n        this.renderer.render(this);\r\n    }\r\n\r\n    public getCell(coord: ICoord): Cell | null {\r\n        const i = MathUtils.minMax(coord.i, 0, this._cells.length);\r\n        const j = MathUtils.minMax(coord.j, 0, this._cells[0].length);\r\n\r\n        try {\r\n            return this._cells[i][j];\r\n        } catch {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public getHealthyNeighborCoords(coord: ICoord): Array<ICoord> {\r\n        const result = new Array<ICoord>();\r\n\r\n        [\r\n            { i: coord.i, j: coord.j - 1 },\r\n            { i: coord.i - 1, j: coord.j - 1 },\r\n            { i: coord.i - 1, j: coord.j },\r\n            { i: coord.i - 1, j: coord.j + 1 },\r\n            { i: coord.i, j: coord.j + 1 },\r\n            { i: coord.i + 1, j: coord.j + 1 },\r\n            { i: coord.i + 1, j: coord.j },\r\n            { i: coord.i + 1, j: coord.j - 1 }\r\n        ].forEach((coord: ICoord) => {\r\n            try {\r\n                if (this._cells[coord.i][coord.j] && this._cells[coord.i][coord.j].state === \"healthy\") {\r\n                    result.push(coord);\r\n                }\r\n            } catch {\r\n                // do nothing\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    public copy(): Area {\r\n        return new Area(this._size, this._cells);\r\n    }\r\n}","import { AreaStateManager } from \"./area-state-manager\";\r\nimport { Area } from \"./models/area\";\r\n\r\nexport class Game {\r\n    public timeoutInSec = 0.3;\r\n\r\n    private readonly area = new Area(5);\r\n    private readonly areaStateManager = new AreaStateManager(this.area);\r\n\r\n    public gameTickCounter = 0;\r\n\r\n    private running = false;\r\n    private dateStart = 0;\r\n    private animationRequestId = 0;\r\n\r\n    public init(): void {\r\n        this.area.render();\r\n    }\r\n\r\n    public start(): void {\r\n        if (this.running) {\r\n            return;\r\n        }\r\n\r\n        this.area.render();\r\n        this.startGameAnimation();\r\n\r\n        this.running = true;\r\n    }\r\n\r\n    private startGameAnimation(): void {\r\n        this.animationRequestId = window.requestAnimationFrame(this.gameTick);\r\n    }\r\n\r\n    private gameTick = (now: number) => {\r\n        if (!this.dateStart || now - this.dateStart >= this.timeoutInSec * 1000) {\r\n            this.dateStart = now;\r\n            this.areaStateManager.next();\r\n            if (this.areaStateManager.isAreaUnchangeable) {\r\n                this.stop();\r\n                this.reset();\r\n            }\r\n\r\n            this.gameTickCounter++;\r\n        }\r\n\r\n        if (this.running) {\r\n            window.requestAnimationFrame(this.gameTick);\r\n        }\r\n    };\r\n\r\n    public stop(): void {\r\n        this.stopGameAnimation();\r\n\r\n        this.running = false;\r\n    }\r\n\r\n    private stopGameAnimation(): void {\r\n        window.cancelAnimationFrame(this.animationRequestId);\r\n        this.animationRequestId = 0;\r\n    }\r\n\r\n    public reset(): void {\r\n        this.areaStateManager.reset();\r\n        this.gameTickCounter = 0;\r\n        this.stop();\r\n    }\r\n\r\n    public setSize(size: number): void {\r\n        this.area.size = size;\r\n        this.area.render();\r\n    }\r\n\r\n    public getSize(): number {\r\n        return this.area.size;\r\n    }\r\n}","import { Game } from \"./game\";\r\n\r\n(w => {\r\n    const game = new Game();\r\n    w[\"game\"] = game;\r\n    game.init();\r\n\r\n    const timeoutInput = document.getElementById(\"timeout\") as HTMLInputElement;\r\n    timeoutInput.addEventListener(\"input\", () => {\r\n        window[\"game\"].timeoutInSec = parseFloat(timeoutInput.value);\r\n    });\r\n\r\n    const areaSizeInput = document.getElementById(\"area-size\") as HTMLInputElement;\r\n    areaSizeInput.addEventListener(\"input\", () => {\r\n        window[\"game\"].setSize(parseInt(areaSizeInput.value));\r\n    });\r\n\r\n    game.timeoutInSec = Number.parseFloat(timeoutInput.value);\r\n    game.setSize(Number.parseInt(areaSizeInput.value));\r\n})(window);\r\n"],"names":["MathUtils","static","value","min","max","Math","ceilMin","ceil","floorMax","floor","random","AreaStateManager","constructor","area","history","Array","stateCounter","countOfHealthyCells","this","saveHistory","isAreaUnchangeable","size","next","centerCoord","i","j","infectCell","Error","coord","cell","getCell","state","stateLifetime","processInfectedCell","processImmuneCell","incrementLifeTime","immunizeCell","neighborCoords","getHealthyNeighborCoords","generateRandomNumber","length","recoverCell","reset","resetCells","resetHistory","push","copy","AreaRenderer","cellSize","canvasEl","document","getElementById","ctx","getContext","render","width","fillStyle","fillRect","height","renderCell","getCellColor","x","y","wOffset","hOffset","Cell","_state","_stateLifetime","infect","immunize","recover","Area","cells","_size","_cells","renderer","initCells","minMax","MIN_SIZE","MAX_SIZE","forEach","row","succeed","result","Game","timeoutInSec","areaStateManager","gameTickCounter","running","dateStart","animationRequestId","gameTick","now","stop","window","requestAnimationFrame","init","start","startGameAnimation","stopGameAnimation","cancelAnimationFrame","setSize","getSize","w","game","timeoutInput","addEventListener","parseFloat","areaSizeInput","parseInt","Number"],"sourceRoot":""}